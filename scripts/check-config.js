#!/usr/bin/env node

import dotenv from 'dotenv';
import { validateConfig } from '../src/validators/config.validator.js';
import { axiosInstance } from '../src/utils/axios.instance.js';

dotenv.config();

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YandexGPT —Å–µ—Ä–≤–µ—Ä–∞...\n');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('-'.repeat(50));

const envVars = [
    { name: 'YANDEX_API_KEY', value: process.env.YANDEX_API_KEY, sensitive: true },
    { name: 'YANDEX_CATALOGUE_ID', value: process.env.YANDEX_CATALOGUE_ID, sensitive: false },
    { name: 'YANDEX_MODEL_URL', value: process.env.YANDEX_MODEL_URL, sensitive: false },
    { name: 'YANDEX_MODEL', value: process.env.YANDEX_MODEL || 'yandexgpt', sensitive: false },
    { name: 'PORT', value: process.env.PORT || '3000', sensitive: false },
    { name: 'NODE_ENV', value: process.env.NODE_ENV || 'development', sensitive: false }
];

let hasErrors = false;

envVars.forEach(({ name, value, sensitive }) => {
    if (value) {
        const displayValue = sensitive ?
            value.substring(0, 10) + '...' + value.substring(value.length - 4) :
            value;
        console.log(`‚úÖ ${name}: ${displayValue}`);
    } else {
        console.log(`‚ùå ${name}: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        if (name.startsWith('YANDEX_API') || name === 'YANDEX_CATALOGUE_ID') {
            hasErrors = true;
        }
    }
});

console.log('\n' + '='.repeat(50));
console.log('üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
console.log('-'.repeat(50));

try {
    validateConfig();
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
} catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    hasErrors = true;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
if (!hasErrors && process.env.YANDEX_API_KEY && process.env.YANDEX_CATALOGUE_ID) {
    console.log('\n' + '='.repeat(50));
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YandexGPT API:');
    console.log('-'.repeat(50));

    const testRequest = {
        modelUri: `gpt://${process.env.YANDEX_CATALOGUE_ID}/yandexgpt`,
        completionOptions: {
            stream: false,
            temperature: 0.1,
            maxTokens: 50
        },
        messages: [
            { role: "system", text: "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" },
            { role: "user", text: "–°–∫–∞–∂–∏ '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ' –≤ –æ—Ç–≤–µ—Ç–µ" }
        ]
    };

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
        console.log(`   Model URI: ${testRequest.modelUri}`);
        console.log(`   API URL: ${process.env.YANDEX_MODEL_URL}`);

        const response = await axiosInstance.post("", testRequest);

        if (response.data && response.data.result) {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: –£—Å–ø–µ—à–Ω–æ');
            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç YandexGPT');
            console.log(`   –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: ${response.data.result.modelVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`   –û—Ç–≤–µ—Ç: ${response.data.result.alternatives[0]?.message?.text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}`);
        }
    } catch (error) {
        console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: –ù–µ —É–¥–∞–ª–æ—Å—å');
        if (error.response) {
            console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.log(`   –û—à–∏–±–∫–∞: ${JSON.stringify(error.response.data, null, 2)}`);

            if (error.response.status === 401) {
                console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –≤–∞—à API –∫–ª—é—á –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω');
                console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤');
                console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–ª—é—á –Ω–µ –∏—Å—Ç–µ–∫');
            } else if (error.response.status === 403) {
                console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:');
                console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å —Ä–æ–ª—å "ai.languageModels.user"');
                console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
                console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É');
                console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤–∫–ª—é—á–µ–Ω —Å–µ—Ä–≤–∏—Å YandexGPT');
            } else if (error.response.status === 400) {
                console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
                console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ modelUri –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã completionOptions');
            }
        } else {
            console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
        }
        hasErrors = true;
    }
}

// –ò—Ç–æ–≥–∏
console.log('\n' + '='.repeat(50));
if (hasErrors) {
    console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    console.log('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.');
    process.exit(1);
} else {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\n–í–∞—à —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start');
    process.exit(0);
}
